# Conformance file for mapi

HF_FIELD hf_mapi_decrypted_data "Decrypted data" "mapi.decrypted.data" FT_BYTES BASE_NONE NULL 0 NULL HFILL

ETT_FIELD ett_mapi_connect_request

MANUAL mapi_dissect_struct_request

MANUAL mapi_dissect_struct_EcDoRpcMapiRequest
MANUAL mapi_dissect_struct_AuxInfo
MANUAL mapi_dissect_struct_AUX_HEADER
MANUAL mapi_dissect_AUX_HEADER_TYPE_ENUM
MANUAL mapi_dissect_AUX_DATA
MANUAL mapi_dissect_struct_EcDoRpcMapiResponse
MANUAL mapi_dissect_struct_response
MANUAL mapi_dissect_element_EcDoRpc_response
MANUAL mapi_dissect_struct_AUX_PERF_CLIENTINFO
MANUAL mapi_dissect_element_AuxInfo_auxHeader
MANUAL mapi_dissect_element_EcDoConnect_szUserDN
MANUAL mapi_dissect_element_EcDoConnectEx_szUserDN
MANUAL mapi_dissect_element_EcDoConnectEx_rgbAuxOut_
MANUAL mapi_dissect_struct_AuxInfoOut
MANUAL mapi_dissect_element_EcDoRpcExt2_rgbAuxOut_
MANUAL mapi_dissect_element_EcDoConnect_rgwClientVersion
MANUAL mapi_dissect_element_EcDoConnect_rgwServerVersion
MANUAL mapi_dissect_element_EcDoConnect_rgwBestVersion
MANUAL mapi_dissect_element_EcDoConnectEx_rgwClientVersion
MANUAL mapi_dissect_element_EcDoConnectEx_rgwServerVersion
MANUAL mapi_dissect_element_EcDoConnectEx_rgwBestVersion

NOEMIT mapi_dissect_element_EcDoRpc_request
NOEMIT mapi_dissect_element_request_len
NOEMIT mapi_dissect_element_request_length
NOEMIT mapi_dissect_element_EcDoRpcMapiRequest_opnum
NOEMIT mapi_dissect_element_request_handles
NOEMIT mapi_dissect_element_EcDoRpc_MAPI_REPL_opnum
NOEMIT mapi_dissect_element_EcDoRpcMapiResponse_opnum
NOEMIT mapi_dissect_element_response_len
NOEMIT mapi_dissect_element_response_length
NOEMIT mapi_dissect_element_response_handles
NOEMIT mapi_dissect_element_EcDoRpc_response_
NOEMIT mapi_dissect_element_AuxInfo_auxInSize
NOEMIT mapi_dissect_element_AuxInfo_auxIn
NOEMIT mapi_dissect_element_AuxInfo_RPC_HEADER_EXT
NOEMIT mapi_dissect_element_AuxInfo_AUX_HEADER
NOEMIT mapi_dissect_element_AUX_HEADER_hdrType
NOEMIT mapi_dissect_element_AUX_HEADER_TYPE_ENUM_Type
NOEMIT mapi_dissect_element_AUX_HEADER_TYPE_ENUM_Type_2
NOEMIT mapi_dissect_element_AUX_HEADER_AuxData
NOEMIT mapi_dissect_element_AUX_DATA_Version1
NOEMIT mapi_dissect_element_AUX_DATA_Version2
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_MachineNameOffset
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_UserNameOffset
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_ClientIPSize
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_ClientIPOffset
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_ClientIPMaskSize
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_ClientIPMaskOffset
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_AdapterNameOffset
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_MacAddressSize
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_MacAddressOffset
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_MachineName
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_UserName
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_ClientIP
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_ClientIPMask
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_AdapterName
NOEMIT mapi_dissect_element_AUX_PERF_CLIENTINFO_MacAddress
NOEMIT mapi_dissect_element_AUX_HEADER_Size
NOEMIT mapi_dissect_element_AuxInfoOut_RPC_HEADER_EXT
NOEMIT mapi_dissect_element_AuxInfoOut_auxHeader
NOEMIT mapi_dissect_element_EcDoConnectEx_rgbAuxOut__
NOEMIT mapi_dissect_element_EcDoRpcExt2_rgbAuxOut__
NOEMIT mapi_dissect_element_AuxInfo_auxHeader_
NOEMIT mapi_dissect_element_EcDoConnect_rgwClientVersion_

CODE START

tvbuff_t *
mapi_deobfuscate(tvbuff_t *tvb, int offset, packet_info *pinfo, guint32 size)
{
	tvbuff_t *deob_tvb = NULL;
	guint8 *decrypted_data;
	const guint8 *ptr;
	gint reported_len;

	reported_len = tvb_reported_length_remaining(tvb, offset);

	if ((guint32) reported_len > size) {
		reported_len = size;
	}

	if (size > (guint32) reported_len) {
		size = reported_len;
	}

	ptr = tvb_get_ptr(tvb, offset, size);

	decrypted_data = (guint8 *)wmem_alloc0(pinfo->pool, size);
	for (guint32 i = 0; i < size; i++) {
		decrypted_data[i] = ptr[i] ^ 0xA5;
	}

	deob_tvb = tvb_new_child_real_data(tvb, decrypted_data, size, reported_len);

	return deob_tvb;
}

/* [MS-OXCRPC] 3.1.4.1.3.1 Version Number Comparison
*/
static int
normalize_version(tvbuff_t *tvb, packet_info *pinfo, int offset, proto_tree *tree, int hf_index, const gchar * str)
{
	guint16 version_0, build_major, product_major, product_minor;
	gchar *value;

	version_0= tvb_get_letohs(tvb, offset);
	build_major= tvb_get_letohs(tvb, offset + 2);

	if(build_major & 0x8000){
		product_major = (version_0 & 0xFF00) >> 8;
		product_minor = (version_0 & 0xFF);
		build_major = (build_major & 0x7FFF);
	} else {
		product_major = version_0;
		product_minor = 0;
	}

	value = wmem_strdup_printf( pinfo->pool
		                     , "%d.%d.%d.%d"
		                     , product_major
		                     , product_minor
		                     , build_major
		                     , tvb_get_letohs(tvb, offset + 4));

	proto_tree_add_string_format( tree
			                    , hf_index
			                    , tvb
			                    , offset
			                    , 6
			                    , value
			                    , "%s: %s"
			                    , str
			                    , value
			                    );
	return offset + 6;
}

static int
mapi_dissect_element_EcDoConnect_rgwClientVersion(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	return normalize_version(tvb, pinfo, offset, tree, hf_mapi_mapi_EcDoConnect_rgwClientVersion, "rgwClientVersion");
}

static int
mapi_dissect_element_EcDoConnect_rgwServerVersion(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	return normalize_version(tvb, pinfo, offset, tree, hf_mapi_mapi_EcDoConnect_rgwServerVersion, "rgwServerVersion");
}

static int
mapi_dissect_element_EcDoConnect_rgwBestVersion(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	return normalize_version(tvb, pinfo, offset, tree, hf_mapi_mapi_EcDoConnect_rgwBestVersion, "rgwBestVersion");
}

static int
mapi_dissect_element_EcDoConnectEx_rgwClientVersion(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	return normalize_version(tvb, pinfo, offset, tree, hf_mapi_mapi_EcDoConnectEx_rgwClientVersion, "rgwClientVersion");
}

static int
mapi_dissect_element_EcDoConnectEx_rgwServerVersion(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	return normalize_version(tvb, pinfo, offset, tree, hf_mapi_mapi_EcDoConnectEx_rgwServerVersion, "rgwServerVersion");
}

static int
mapi_dissect_element_EcDoConnectEx_rgwBestVersion(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	return normalize_version(tvb, pinfo, offset, tree, hf_mapi_mapi_EcDoConnectEx_rgwBestVersion, "rgwBestVersion");
}


static int
mapi_dissect_element_EcDoRpc_request(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	offset = mapi_dissect_struct_request(tvb, offset, pinfo, tree, di, drep, hf_mapi_mapi_EcDoRpc_mapi_request, 0);

	return offset;
}

static int
mapi_dissect_element_EcDoRpc_response(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	offset = mapi_dissect_struct_response(tvb, offset, pinfo, tree, di, drep, hf_mapi_mapi_EcDoRpc_mapi_response, 0);

	return offset;
}

/**
 * Analyze mapi_request MAPI Handles
 */
static int
mapi_dissect_element_handles_cnf(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, int hf_index _U_, guint8 *drep _U_)
{
	gint		reported_len;
	gint		handles_cnt = 0;
	guint32		value;
	proto_tree	*tr = NULL;

	reported_len = tvb_reported_length_remaining(tvb, offset);

	handles_cnt = reported_len / 4;

	tr = proto_tree_add_subtree_format(tree, tvb, offset, reported_len, ett_mapi_mapi_request, NULL, "MAPI Handles: %d", handles_cnt);

	for (gint i = 0; i < handles_cnt; i++) {
		value = tvb_get_letohl(tvb, offset);
		proto_tree_add_uint_format(tr, hf_index, tvb, offset, 4, value, "[%.2d] MAPI handle: 0x%.8x", i, value);
		offset += 4;
	}

	return offset;
}

int
mapi_dissect_struct_response(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	int start_offset = offset;
	tvbuff_t	*decrypted_tvb;
	guint32		size;
	guint16		pdu_len;
	proto_tree	*tr = NULL;

	ALIGN_TO_5_BYTES;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, start_offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_mapi_mapi_response);
	}

	offset = dissect_ndr_uint32(tvb, start_offset, pinfo, tree, di, drep, hf_mapi_mapi_response_mapi_len, &size);

	decrypted_tvb = mapi_deobfuscate(tvb, offset, pinfo, size);
	if (!decrypted_tvb || tvb_reported_length(decrypted_tvb) != size) {
		return offset;
	}

	{
		add_new_data_source(pinfo, decrypted_tvb, "Decrypted MAPI");

		tr = proto_tree_add_subtree(tree, decrypted_tvb, 0, size, ett_mapi_mapi_response, NULL, "Decrypted MAPI PDU");

		pdu_len = tvb_get_letohs(decrypted_tvb, 0);
		proto_tree_add_uint(tr, hf_mapi_mapi_response_length, decrypted_tvb, 0, sizeof(guint16), pdu_len);
		proto_tree_add_item(tr, hf_mapi_decrypted_data, decrypted_tvb, sizeof(guint16), pdu_len - sizeof(guint16), ENC_NA);

		/* analyze contents */
		mapi_dissect_element_response_repl(decrypted_tvb, sizeof(guint16), pinfo, tr, di, drep);
		mapi_dissect_element_handles_cnf(decrypted_tvb, pdu_len, pinfo, tr, di, hf_mapi_mapi_response_handles, drep);

		offset += size;
	}

	proto_item_set_len(item, offset - start_offset);

	if (di->call_data->flags & DCERPC_IS_NDR64) {
		ALIGN_TO_5_BYTES;
	}

	return offset;
}

static int
mapi_dissect_element_AuxInfo_auxHeader(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	guint total_length = tvb_reported_length(tvb);

	if(di->conformant_run){
		return offset;
	}

	while(offset >= 0 && (guint)offset < total_length){
		offset = mapi_dissect_struct_AUX_HEADER(tvb,offset,pinfo,tree,di,drep,di->ptype == PDU_REQ ? hf_mapi_AuxInfo_auxHeader : hf_mapi_AuxInfoOut_auxHeader ,0);
	}

	return offset;
}

	#define  RHEF_Compressed   0x0001
	#define  RHEF_XorMagic     0x0002
	#define  RHEF_Last         0x0004

int
mapi_dissect_struct_AuxInfo(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	int old_offset;
	guint16 compressedSize= 0, uncompressedSize= 0;
	guint16 flags;
	tvbuff_t *uncomp_tvb = NULL;
	proto_tree	*tr = NULL;

	ALIGN_TO_4_BYTES;

	if(di->conformant_run){
		return offset;
	}

	old_offset = offset;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_mapi_AuxInfo);
	}

	if (di->ptype == PDU_REQ){
		offset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep, hf_mapi_AuxInfo_auxInSize, NULL);
	}

	{
		proto_tree *hTree = NULL;
		proto_item *rpcItem = NULL;

		ALIGN_TO_2_BYTES;

		if (tree) {
			rpcItem = proto_tree_add_item(tree, di->ptype == PDU_REQ ? hf_mapi_AuxInfo_RPC_HEADER_EXT : hf_mapi_AuxInfoOut_RPC_HEADER_EXT, tvb, offset, -1, ENC_NA);
			hTree = proto_item_add_subtree(rpcItem, ett_mapi_RPC_HEADER_EXT);
		}

		offset = mapi_dissect_element_RPC_HEADER_EXT_Version(tvb, offset, pinfo, hTree, di, drep);

		proto_item *flagItem;
		static int * const mapi_RPC_HEADER_EXT_Flags_fields[] = {
			&hf_mapi_RPC_HEADER_EXT_Flags_RHEF_Compressed,
			&hf_mapi_RPC_HEADER_EXT_Flags_RHEF_XorMagic,
			&hf_mapi_RPC_HEADER_EXT_Flags_RHEF_Last,
			NULL
		};

		ALIGN_TO_2_BYTES;

		flagItem = proto_tree_add_bitmask_with_flags(hTree, tvb, offset, hf_mapi_RPC_HEADER_EXT_Flags,
					ett_mapi_RPC_HEADER_EXT_Flags, mapi_RPC_HEADER_EXT_Flags_fields, DREP_ENC_INTEGER(drep), BMT_NO_FALSE);

		offset = dissect_ndr_uint16(tvb, offset, pinfo, hTree, di, drep, -1, &flags);

		if (!flags)
			proto_item_append_text(flagItem, ": (No values set)");

		if (flags & (~0x00000007)) {
			flags &= (~0x00000007);
			proto_item_append_text(flagItem, "Unknown bitmap value 0x%x", flags);
		}

		offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, hTree, di, drep, hf_mapi_RPC_HEADER_EXT_Size, 0, &compressedSize);
		offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, hTree, di, drep, hf_mapi_RPC_HEADER_EXT_SizeActual, 0, &uncompressedSize);

		proto_item_set_len(flagItem, offset-old_offset);

		if (di->call_data->flags & DCERPC_IS_NDR64) {
			ALIGN_TO_2_BYTES;
		}
	}

	bool last = RHEF_Last == (flags & RHEF_Last);
	bool compressed = RHEF_Compressed == (flags & RHEF_Compressed);
	bool xored = RHEF_XorMagic == (flags & RHEF_XorMagic);

	if (!last){
		// TODO: Currently we don't support multiple buffers of RPC_HEADER_EXT.
		return offset;
	}

	if (compressed && xored){
		// TODO: Currently we don't support both compressed and Xored
		return offset;
	}

	if (compressed){
		uncomp_tvb= tvb_child_uncompress_lz77(tvb, tvb, offset, compressedSize);
	} else if (xored){
		uncomp_tvb= mapi_deobfuscate(tvb, offset, pinfo, uncompressedSize);
	} else if (!compressed && !xored) {
		uncomp_tvb = tvb_new_subset_length(tvb, offset, uncompressedSize);
	} else {
		return offset;
	}

	if (!uncomp_tvb || tvb_reported_length(uncomp_tvb) != uncompressedSize) {
		return offset;
	}

	add_new_data_source(pinfo, uncomp_tvb, "Decrypted MAPI");

	tr = proto_tree_add_subtree(tree, uncomp_tvb, 0, tvb_reported_length(uncomp_tvb), ett_mapi_connect_request, NULL, "Decrypted MAPI PDU");

	mapi_dissect_element_AuxInfo_auxHeader(uncomp_tvb, 0, pinfo, tr, di, drep);

	offset += compressedSize;

	proto_item_set_len(item, offset-old_offset);

	if (di->call_data->flags & DCERPC_IS_NDR64) {
		ALIGN_TO_4_BYTES;
	}

	return offset;
}

int
dissect_EcDoConnectEx_AuxInfoOut(tvbuff_t *tvb _U_, int offset _U_, int length _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	if (length == 0){
		return offset;
	}
	return mapi_dissect_struct_AuxInfo(tvb, offset, pinfo, parent_tree, di, drep, hf_mapi_mapi_EcDoConnectEx_rgbAuxOut, 0);
}

static int
mapi_dissect_element_EcDoConnectEx_rgbAuxOut_(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	offset = dissect_ndr_ucvarray_block(tvb, offset, pinfo, tree, di, drep, &dissect_EcDoConnectEx_AuxInfoOut);

	return offset;
}

int
dissect_EcDoRpcExt2_AuxInfoOut(tvbuff_t *tvb _U_, int offset _U_, int length _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	if (length == 0){
		return offset;
	}
	return mapi_dissect_struct_AuxInfo(tvb, offset, pinfo, parent_tree, di, drep, hf_mapi_mapi_EcDoRpcExt2_rgbAuxOut, 0);
}

static int
mapi_dissect_element_EcDoRpcExt2_rgbAuxOut_(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	offset = dissect_ndr_ucvarray_block(tvb, offset, pinfo, tree, di, drep, &dissect_EcDoRpcExt2_AuxInfoOut);

	return offset;
}

int
mapi_dissect_struct_AUX_PERF_CLIENTINFO(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	gboolean oldalign = di->no_align;
	int old_offset, cur_end_offset;
	guint16 MachineNameOffset;
	guint16 UserNameOffset;
	guint16 ClientIPSize;
	guint16 ClientIPOffset;
	guint16 ClientIPMaskSize;
	guint16 ClientIPMaskOffset;
	guint16 AdapterNameOffset;
	guint16 MacAddressSize;
	guint16 MacAddressOffset;

	di->no_align = TRUE;

	old_offset = offset;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_mapi_AUX_PERF_CLIENTINFO);
	}

	offset = mapi_dissect_element_AUX_PERF_CLIENTINFO_AdapterSpeed(tvb, offset, pinfo, tree, di, drep);

	offset = mapi_dissect_element_AUX_PERF_CLIENTINFO_ClientID(tvb, offset, pinfo, tree, di, drep);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_MachineNameOffset, 0, &MachineNameOffset);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_UserNameOffset, 0, &UserNameOffset);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_ClientIPSize, 0, &ClientIPSize);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_ClientIPOffset, 0, &ClientIPOffset);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_ClientIPMaskSize, 0, &ClientIPMaskSize);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_ClientIPMaskOffset, 0, &ClientIPMaskOffset);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_AdapterNameOffset, 0, &AdapterNameOffset);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_MacAddressSize, 0, &MacAddressSize);

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_MacAddressOffset, 0, &MacAddressOffset);

	offset = mapi_dissect_element_AUX_PERF_CLIENTINFO_ClientMode(tvb, offset, pinfo, tree, di, drep);

	offset = mapi_dissect_element_AUX_PERF_CLIENTINFO_Reserved(tvb, offset, pinfo, tree, di, drep);

	if (MachineNameOffset > 0){
		cur_end_offset = dissect_null_term_wstring(tvb, MachineNameOffset, pinfo, tree, drep, hf_mapi_AUX_PERF_CLIENTINFO_MachineName , 0);
		if (cur_end_offset > offset)
			offset = cur_end_offset;
	}

	if (UserNameOffset > 0){
		cur_end_offset = dissect_null_term_wstring(tvb, UserNameOffset, pinfo, tree, drep, hf_mapi_AUX_PERF_CLIENTINFO_UserName , 0);
		if (cur_end_offset > offset)
			offset = cur_end_offset;
	}

	if (ClientIPOffset > 0 && ClientIPSize > 0){
		for (int i = 0; i < ClientIPSize; i++)
			cur_end_offset = PIDL_dissect_uint8(tvb, ClientIPOffset+i, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_ClientIP, 0);

		if (cur_end_offset > offset)
			offset = cur_end_offset;
	}

	if (ClientIPMaskOffset > 0 && ClientIPMaskSize > 0){
		for (int i = 0; i < ClientIPMaskSize; i++)
			cur_end_offset = PIDL_dissect_uint8(tvb, ClientIPMaskOffset+i, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_ClientIPMask, 0);

		if (cur_end_offset > offset)
			offset = cur_end_offset;
	}

	if (AdapterNameOffset > 0){
		cur_end_offset = dissect_null_term_wstring(tvb, AdapterNameOffset, pinfo, tree, drep, hf_mapi_AUX_PERF_CLIENTINFO_AdapterName , 0);

		if (cur_end_offset > offset)
			offset = cur_end_offset;
	}

	if (MacAddressOffset > 0 && MacAddressSize > 0){
		for (int i = 0; i < MacAddressSize; i++)
			cur_end_offset = PIDL_dissect_uint8(tvb, MacAddressOffset+i, pinfo, tree, di, drep, hf_mapi_AUX_PERF_CLIENTINFO_MacAddress, 0);

		if (cur_end_offset > offset)
			offset = cur_end_offset;
	}

	proto_item_set_len(item, offset-old_offset);

	di->no_align = oldalign;

	return offset;
}

static int
mapi_dissect_AuxDataVersion1(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_);

static int
mapi_dissect_AuxDataVersion2(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_);

static int
mapi_dissect_AUX_DATA(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, guint8 Version, int hf_index _U_, guint8 hdrType)
{
	switch(Version) {
		case AUX_VERSION_1:
			return mapi_dissect_AuxDataVersion1(tvb, offset, pinfo, parent_tree, di, drep, hf_mapi_AUX_DATA_Version1, hdrType);
		case AUX_VERSION_2:
			return mapi_dissect_AuxDataVersion2(tvb, offset, pinfo, parent_tree, di, drep, hf_mapi_AUX_DATA_Version2, hdrType);
		default:
			return offset;
	}
}

int
mapi_dissect_AUX_HEADER_TYPE_ENUM(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, guint8 Version, int hf_index _U_, guint8 *hdrType)
{
	switch(Version) {
		case AUX_VERSION_1:
			return PIDL_dissect_uint8_val(tvb, offset, pinfo, parent_tree, di, drep, hf_mapi_AUX_HEADER_TYPE_ENUM_Type, 0, hdrType);
		case AUX_VERSION_2:
			return PIDL_dissect_uint8_val(tvb, offset, pinfo, parent_tree, di, drep, hf_mapi_AUX_HEADER_TYPE_ENUM_Type_2, 0, hdrType);
		default:
			return offset;
	}
}

int
mapi_dissect_struct_AUX_HEADER(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	guint16 auxSize = 0;
	guint8 Version = 0;
	guint8 hdrType = 0;
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	gboolean oldalign = di->no_align;

	di->no_align = TRUE;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_mapi_AUX_HEADER);
	}

	offset = PIDL_dissect_uint16_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_AUX_HEADER_Size, 0, &auxSize);
	offset = mapi_dissect_element_AUX_HEADER_Version(tvb, offset, pinfo, tree, di, drep, &Version);
	offset = mapi_dissect_AUX_HEADER_TYPE_ENUM(tvb, offset, pinfo, tree, di, drep, Version, hf_mapi_AUX_HEADER_hdrType, &hdrType);
	offset = mapi_dissect_AUX_DATA(tvb, offset, pinfo, tree, di, drep, Version, hf_mapi_AUX_HEADER_AuxData, hdrType);

	proto_item_set_len(item, auxSize);

	di->no_align = oldalign;

	return offset;
}

int
mapi_dissect_struct_EcDoRpcMapiRequest(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	guint8 opnum = 0;
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	gboolean oldalign = di->no_align;
	int old_offset;

	di->no_align = TRUE;

	old_offset = offset;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_mapi_EcDoRpcMapiRequest);
	}

	offset = PIDL_dissect_uint8_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_EcDoRpcMapiRequest_opnum, param, &opnum);

	col_append_fstr(pinfo->cinfo, COL_INFO, " + %s", val_to_str(opnum, mapi_MAPI_OPNUM_vals, "Unknown MAPI operation"));

	offset = mapi_dissect_element_EcDoRpcMapiRequest_logon_id(tvb, offset, pinfo, tree, di, drep);

	offset = mapi_dissect_element_EcDoRpcMapiRequest_handle_idx(tvb, offset, pinfo, tree, di, drep);

	offset = mapi_dissect_element_EcDoRpcMapiRequest_u(tvb, offset, pinfo, tree, di, drep, &opnum);

	proto_item_set_len(item, offset-old_offset);

	di->no_align = oldalign;

	return offset;
}

int
mapi_dissect_struct_request(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	int start_offset = offset;;
	tvbuff_t *decrypted_tvb = NULL;
	guint16		pdu_len;
	guint32		size;
	proto_tree	*tr = NULL;

	ALIGN_TO_5_BYTES;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_mapi_mapi_request);
	}

	offset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep, hf_mapi_mapi_request_mapi_len, &size);

	decrypted_tvb = mapi_deobfuscate(tvb, offset, pinfo, size);
	if (!decrypted_tvb || tvb_reported_length(decrypted_tvb) != size) {
		return offset;
	}

	{
		add_new_data_source(pinfo, decrypted_tvb, "Decrypted MAPI");

		tr = proto_tree_add_subtree(tree, decrypted_tvb, 0, size, ett_mapi_mapi_request, NULL, "Decrypted MAPI PDU");

		pdu_len = tvb_get_letohs(decrypted_tvb, 0);
		proto_tree_add_uint(tr, hf_mapi_mapi_request_length, decrypted_tvb, 0, 2, pdu_len);
		proto_tree_add_item(tr, hf_mapi_decrypted_data, decrypted_tvb, 2, pdu_len - 2, ENC_NA);

		/* analyze contents */
		mapi_dissect_element_request_req(decrypted_tvb, 2, pinfo, tr, di, drep);

		mapi_dissect_element_handles_cnf(decrypted_tvb, pdu_len, pinfo, tr, di, hf_mapi_mapi_request_handles, drep);

		offset += size;
	}

	proto_item_set_len(item, offset - start_offset);

	if (di->call_data->flags & DCERPC_IS_NDR64) {
		ALIGN_TO_5_BYTES;
	}

	return offset;
}

static int
mapi_dissect_element_EcDoConnect_szUserDN(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	char *data;

	offset = dissect_ndr_cvstring(tvb, offset, pinfo, tree, di, drep, sizeof(guint8), hf_mapi_mapi_EcDoConnect_szUserDN, FALSE, &data);
	proto_item_append_text(tree, ": %s", data);
	col_append_fstr(pinfo->cinfo, COL_INFO, " DN: %s", data);

	return offset;
}

static int
mapi_dissect_element_EcDoConnectEx_szUserDN(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *tree _U_, dcerpc_info* di _U_, guint8 *drep _U_)
{
	char *data;

	offset = dissect_ndr_cvstring(tvb, offset, pinfo, tree, di, drep, sizeof(guint8), hf_mapi_mapi_EcDoConnectEx_szUserDN, FALSE, &data);
	proto_item_append_text(tree, ": %s", data);

	col_append_fstr(pinfo->cinfo, COL_INFO, " DN: %s", data);

	return offset;
}

int
mapi_dissect_struct_EcDoRpcMapiResponse(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	guint8 opnum = 0;
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	gboolean oldalign = di->no_align;
	int old_offset;

	di->no_align = TRUE;

	old_offset = offset;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_mapi_EcDoRpcMapiResponse);
	}

	offset = PIDL_dissect_uint8_val(tvb, offset, pinfo, tree, di, drep, hf_mapi_EcDoRpcMapiResponse_opnum, param, &opnum);
	col_append_fstr(pinfo->cinfo, COL_INFO, " + %s", val_to_str(opnum, mapi_MAPI_OPNUM_vals, "Unknown MAPI operation"));

	offset = mapi_dissect_element_EcDoRpcMapiResponse_handle_idx(tvb, offset, pinfo, tree, di, drep);

	offset = mapi_dissect_element_EcDoRpcMapiResponse_error_code(tvb, offset, pinfo, tree, di, drep);

	offset = mapi_dissect_element_EcDoRpcMapiResponse_u(tvb, offset, pinfo, tree, di, drep, &opnum);

	proto_item_set_len(item, offset-old_offset);

	di->no_align = oldalign;

	return offset;
}

CODE END